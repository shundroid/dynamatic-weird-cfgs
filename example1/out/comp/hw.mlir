module {
  hw.module @example1(in %a_loadData : i32, in %b_loadData : i32, in %a_start : !handshake.control<>, in %b_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out a_end : !handshake.control<>, out b_end : !handshake.control<>, out end : !handshake.control<>, out a_loadEn : i1, out a_loadAddr : i10, out a_storeEn : i1, out a_storeAddr : i10, out a_storeData : i32, out b_loadEn : i1, out b_loadAddr : i10, out b_storeEn : i1, out b_storeAddr : i10, out b_storeData : i32) {
    %fork0.outs_0, %fork0.outs_1, %fork0.outs_2, %fork0.outs_3 = hw.instance "fork0" @handshake_fork_0(ins: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>, outs_3: !handshake.control<>)
    %mem_controller2.memEnd, %mem_controller2.loadEn, %mem_controller2.loadAddr, %mem_controller2.storeEn, %mem_controller2.storeAddr, %mem_controller2.storeData = hw.instance "mem_controller2" @handshake_mem_controller_0(loadData: %b_loadData: i32, memStart: %b_start: !handshake.control<>, ctrl_0: %extsi1.outs: !handshake.channel<i32>, stAddr_0: %store0.addrOut: !handshake.channel<i10>, stData_0: %store0.dataToMem: !handshake.channel<i32>, ctrlEnd: %fork10.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (memEnd: !handshake.control<>, loadEn: i1, loadAddr: i10, storeEn: i1, storeAddr: i10, storeData: i32)
    %mem_controller3.ldData_0, %mem_controller3.memEnd, %mem_controller3.loadEn, %mem_controller3.loadAddr, %mem_controller3.storeEn, %mem_controller3.storeAddr, %mem_controller3.storeData = hw.instance "mem_controller3" @handshake_mem_controller_1(loadData: %a_loadData: i32, memStart: %a_start: !handshake.control<>, ldAddr_0: %load0.addrOut: !handshake.channel<i10>, ctrlEnd: %fork10.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i10, storeEn: i1, storeAddr: i10, storeData: i32)
    %constant3.outs = hw.instance "constant3" @handshake_constant_0(ctrl: %fork0.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %constant5.outs = hw.instance "constant5" @handshake_constant_1(ctrl: %fork0.outs_3: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %extsi5.outs = hw.instance "extsi5" @handshake_extsi_0(ins: %constant3.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %mux0.outs = hw.instance "mux0" @handshake_mux_0(index: %fork2.outs_0: !handshake.channel<i1>, ins_0: %extsi5.outs: !handshake.channel<i11>, ins_1: %cond_br5.trueOut: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %mux1.outs = hw.instance "mux1" @handshake_mux_1(index: %fork2.outs_1: !handshake.channel<i1>, ins_0: %constant5.outs: !handshake.channel<i1>, ins_1: %cond_br6.trueOut: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %buffer2.outs = hw.instance "buffer2" @handshake_buffer_0(ins: %mux1.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %buffer3.outs = hw.instance "buffer3" @handshake_buffer_1(ins: %buffer2.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %fork1.outs_0, %fork1.outs_1, %fork1.outs_2 = hw.instance "fork1" @handshake_fork_1(ins: %buffer3.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>)
    %control_merge0.outs, %control_merge0.index = hw.instance "control_merge0" @handshake_control_merge_0(ins_0: %fork0.outs_2: !handshake.control<>, ins_1: %cond_br7.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %fork2.outs_0, %fork2.outs_1 = hw.instance "fork2" @handshake_fork_2(ins: %control_merge0.index: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %buffer4.outs = hw.instance "buffer4" @handshake_buffer_2(ins: %control_merge0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer5.outs = hw.instance "buffer5" @handshake_buffer_3(ins: %buffer4.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork3.outs_0, %fork3.outs_1 = hw.instance "fork3" @handshake_fork_3(ins: %buffer5.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %constant6.outs = hw.instance "constant6" @handshake_constant_0(ctrl: %fork3.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %buffer0.outs = hw.instance "buffer0" @handshake_buffer_4(ins: %mux0.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer1.outs = hw.instance "buffer1" @handshake_buffer_5(ins: %buffer0.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %cond_br2.trueOut, %cond_br2.falseOut = hw.instance "cond_br2" @handshake_cond_br_0(condition: %fork1.outs_0: !handshake.channel<i1>, data: %buffer1.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i11>, falseOut: !handshake.channel<i11>)
    %cond_br3.trueOut, %cond_br3.falseOut = hw.instance "cond_br3" @handshake_cond_br_1(condition: %fork1.outs_2: !handshake.channel<i1>, data: %fork3.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %cond_br4.trueOut, %cond_br4.falseOut = hw.instance "cond_br4" @handshake_cond_br_2(condition: %fork1.outs_1: !handshake.channel<i1>, data: %constant6.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i1>, falseOut: !handshake.channel<i1>)
    hw.instance "sink0" @handshake_sink_0(ins: %cond_br4.trueOut: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer6.outs = hw.instance "buffer6" @handshake_buffer_4(ins: %cond_br2.trueOut: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer7.outs = hw.instance "buffer7" @handshake_buffer_5(ins: %buffer6.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %fork4.outs_0, %fork4.outs_1, %fork4.outs_2 = hw.instance "fork4" @handshake_fork_4(ins: %buffer7.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i11>, outs_1: !handshake.channel<i11>, outs_2: !handshake.channel<i11>)
    %trunci0.outs = hw.instance "trunci0" @handshake_trunci_0(ins: %fork4.outs_0: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %trunci1.outs = hw.instance "trunci1" @handshake_trunci_0(ins: %fork4.outs_1: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %buffer8.outs = hw.instance "buffer8" @handshake_buffer_2(ins: %cond_br3.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer9.outs = hw.instance "buffer9" @handshake_buffer_3(ins: %buffer8.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork5.outs_0, %fork5.outs_1 = hw.instance "fork5" @handshake_fork_3(ins: %buffer9.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %constant4.outs = hw.instance "constant4" @handshake_constant_2(ctrl: %fork5.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi1.outs = hw.instance "extsi1" @handshake_extsi_1(ins: %constant4.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %source0.outs = hw.instance "source0" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant10.outs = hw.instance "constant10" @handshake_constant_3(ctrl: %source0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i3>)
    %extsi2.outs = hw.instance "extsi2" @handshake_extsi_2(ins: %constant10.outs: !handshake.channel<i3>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %load0.addrOut, %load0.dataOut = hw.instance "load0" @handshake_load_0(addrIn: %trunci1.outs: !handshake.channel<i10>, dataFromMem: %mem_controller3.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i10>, dataOut: !handshake.channel<i32>)
    %fork6.outs_0, %fork6.outs_1 = hw.instance "fork6" @handshake_fork_5(ins: %load0.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %store0.addrOut, %store0.dataToMem = hw.instance "store0" @handshake_store_0(addrIn: %trunci0.outs: !handshake.channel<i10>, dataIn: %fork6.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i10>, dataToMem: !handshake.channel<i32>)
    %cmpi0.result = hw.instance "cmpi0" @handshake_cmpi_0(lhs: %fork6.outs_1: !handshake.channel<i32>, rhs: %extsi2.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %mux2.outs = hw.instance "mux2" @handshake_mux_1(index: %fork7.outs_1: !handshake.channel<i1>, ins_0: %cond_br4.falseOut: !handshake.channel<i1>, ins_1: %cmpi0.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %mux3.outs = hw.instance "mux3" @handshake_mux_0(index: %fork7.outs_0: !handshake.channel<i1>, ins_0: %cond_br2.falseOut: !handshake.channel<i11>, ins_1: %fork4.outs_2: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer12.outs = hw.instance "buffer12" @handshake_buffer_4(ins: %mux3.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer13.outs = hw.instance "buffer13" @handshake_buffer_5(ins: %buffer12.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %extsi6.outs = hw.instance "extsi6" @handshake_extsi_3(ins: %buffer13.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i12>)
    %control_merge2.outs, %control_merge2.index = hw.instance "control_merge2" @handshake_control_merge_0(ins_0: %cond_br3.falseOut: !handshake.control<>, ins_1: %fork5.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %fork7.outs_0, %fork7.outs_1 = hw.instance "fork7" @handshake_fork_2(ins: %control_merge2.index: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %source1.outs = hw.instance "source1" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant11.outs = hw.instance "constant11" @handshake_constant_4(ctrl: %source1.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %extsi7.outs = hw.instance "extsi7" @handshake_extsi_3(ins: %constant11.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i12>)
    %source2.outs = hw.instance "source2" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant12.outs = hw.instance "constant12" @handshake_constant_2(ctrl: %source2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi8.outs = hw.instance "extsi8" @handshake_extsi_4(ins: %constant12.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i12>)
    %addi0.result = hw.instance "addi0" @handshake_addi_0(lhs: %extsi6.outs: !handshake.channel<i12>, rhs: %extsi8.outs: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i12>)
    %fork8.outs_0, %fork8.outs_1 = hw.instance "fork8" @handshake_fork_6(ins: %addi0.result: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i12>, outs_1: !handshake.channel<i12>)
    %trunci2.outs = hw.instance "trunci2" @handshake_trunci_1(ins: %fork8.outs_0: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %cmpi1.result = hw.instance "cmpi1" @handshake_cmpi_1(lhs: %fork8.outs_1: !handshake.channel<i12>, rhs: %extsi7.outs: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork9.outs_0, %fork9.outs_1, %fork9.outs_2 = hw.instance "fork9" @handshake_fork_1(ins: %cmpi1.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>)
    %cond_br5.trueOut, %cond_br5.falseOut = hw.instance "cond_br5" @handshake_cond_br_0(condition: %fork9.outs_0: !handshake.channel<i1>, data: %trunci2.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i11>, falseOut: !handshake.channel<i11>)
    hw.instance "sink2" @handshake_sink_1(ins: %cond_br5.falseOut: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer10.outs = hw.instance "buffer10" @handshake_buffer_0(ins: %mux2.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %buffer11.outs = hw.instance "buffer11" @handshake_buffer_1(ins: %buffer10.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %cond_br6.trueOut, %cond_br6.falseOut = hw.instance "cond_br6" @handshake_cond_br_2(condition: %fork9.outs_1: !handshake.channel<i1>, data: %buffer11.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i1>, falseOut: !handshake.channel<i1>)
    hw.instance "sink3" @handshake_sink_0(ins: %cond_br6.falseOut: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer14.outs = hw.instance "buffer14" @handshake_buffer_2(ins: %control_merge2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer15.outs = hw.instance "buffer15" @handshake_buffer_3(ins: %buffer14.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br7.trueOut, %cond_br7.falseOut = hw.instance "cond_br7" @handshake_cond_br_1(condition: %fork9.outs_2: !handshake.channel<i1>, data: %buffer15.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %buffer16.outs = hw.instance "buffer16" @handshake_buffer_2(ins: %cond_br7.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer17.outs = hw.instance "buffer17" @handshake_buffer_3(ins: %buffer16.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork10.outs_0, %fork10.outs_1 = hw.instance "fork10" @handshake_fork_3(ins: %buffer17.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    hw.output %mem_controller3.memEnd, %mem_controller2.memEnd, %fork0.outs_1, %mem_controller3.loadEn, %mem_controller3.loadAddr, %mem_controller3.storeEn, %mem_controller3.storeAddr, %mem_controller3.storeData, %mem_controller2.loadEn, %mem_controller2.loadAddr, %mem_controller2.storeEn, %mem_controller2.storeAddr, %mem_controller2.storeData : !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i10, i1, i10, i32, i1, i10, i1, i10, i32
  }
  hw.module.extern @handshake_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>, out outs_3 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_mem_controller_0(in %loadData : i32, in %memStart : !handshake.control<>, in %ctrl_0 : !handshake.channel<i32>, in %stAddr_0 : !handshake.channel<i10>, in %stData_0 : !handshake.channel<i32>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i10, out storeEn : i1, out storeAddr : i10, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 1 : ui32, NUM_LOADS = 0 : ui32, NUM_STORES = 1 : ui32}}
  hw.module.extern @handshake_mem_controller_1(in %loadData : i32, in %memStart : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i10>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i10, out storeEn : i1, out storeAddr : i10, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 0 : ui32, NUM_LOADS = 1 : ui32, NUM_STORES = 0 : ui32}}
  hw.module.extern @handshake_constant_0(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 1 : ui32, VALUE = "0"}}
  hw.module.extern @handshake_constant_1(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 1 : ui32, VALUE = "1"}}
  hw.module.extern @handshake_extsi_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i1>, OUTPUT_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_mux_0(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i11>, in %ins_1 : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_mux_1(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i1>, in %ins_1 : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_1(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_1(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_control_merge_0(in %ins_0 : !handshake.control<>, in %ins_1 : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>, out index : !handshake.channel<i1>) attributes {hw.name = "handshake.control_merge", hw.parameters = {DATA_TYPE = !handshake.control<>, INDEX_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_fork_2(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_2(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_3(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_3(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_4(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_5(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_cond_br_0(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i11>, out falseOut : !handshake.channel<i11>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_cond_br_1(in %condition : !handshake.channel<i1>, in %data : !handshake.control<>, in %clk : i1, in %rst : i1, out trueOut : !handshake.control<>, out falseOut : !handshake.control<>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.control<>}}
  hw.module.extern @handshake_cond_br_2(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i1>, out falseOut : !handshake.channel<i1>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i1>}}
  hw.module.extern @handshake_sink_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i1>}}
  hw.module.extern @handshake_fork_4(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i11>, out outs_1 : !handshake.channel<i11>, out outs_2 : !handshake.channel<i11>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_trunci_0(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i10>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i11>, OUTPUT_TYPE = !handshake.channel<i10>}}
  hw.module.extern @handshake_constant_2(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 2 : ui32, VALUE = "01"}}
  hw.module.extern @handshake_extsi_1(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_source_0(in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.source", hw.parameters = {}}
  hw.module.extern @handshake_constant_3(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i3>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 3 : ui32, VALUE = "010"}}
  hw.module.extern @handshake_extsi_2(in %ins : !handshake.channel<i3>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i3>, OUTPUT_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_load_0(in %addrIn : !handshake.channel<i10>, in %dataFromMem : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i10>, out dataOut : !handshake.channel<i32>) attributes {hw.name = "handshake.load", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_fork_5(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i32>, out outs_1 : !handshake.channel<i32>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_store_0(in %addrIn : !handshake.channel<i10>, in %dataIn : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i10>, out dataToMem : !handshake.channel<i32>) attributes {hw.name = "handshake.store", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_cmpi_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpi", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, PREDICATE = "sge"}}
  hw.module.extern @handshake_extsi_3(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i12>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i11>, OUTPUT_TYPE = !handshake.channel<i12>}}
  hw.module.extern @handshake_constant_4(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 11 : ui32, VALUE = "01111101000"}}
  hw.module.extern @handshake_extsi_4(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i12>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i12>}}
  hw.module.extern @handshake_addi_0(in %lhs : !handshake.channel<i12>, in %rhs : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i12>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i12>}}
  hw.module.extern @handshake_fork_6(in %ins : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i12>, out outs_1 : !handshake.channel<i12>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i12>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_trunci_1(in %ins : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i12>, OUTPUT_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_cmpi_1(in %lhs : !handshake.channel<i12>, in %rhs : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpi", hw.parameters = {DATA_TYPE = !handshake.channel<i12>, PREDICATE = "ult"}}
  hw.module.extern @handshake_sink_1(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i11>}}
  hw.module.extern @mem_to_bram_32_10(in %loadEn : i1, in %loadAddr : i10, in %storeEn : i1, in %storeAddr : i10, in %storeData : i32, in %din0 : i32, in %din1 : i32, out ce0 : i1, out we0 : i1, out address0 : i10, out dout0 : i32, out ce1 : i1, out we1 : i1, out address1 : i10, out dout1 : i32, out loadData : i32) attributes {hw.name = "mem_to_bram", hw.parameters = {ADDR_WIDTH = 10 : ui32, DATA_WIDTH = 32 : ui32}}
  hw.module @example1_wrapper(in %a_din0 : i32, in %a_din1 : i32, in %b_din0 : i32, in %b_din1 : i32, in %a_start : !handshake.control<>, in %b_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out a_end : !handshake.control<>, out b_end : !handshake.control<>, out end : !handshake.control<>, out a_ce0 : i1, out a_we0 : i1, out a_address0 : i10, out a_dout0 : i32, out a_ce1 : i1, out a_we1 : i1, out a_address1 : i10, out a_dout1 : i32, out b_ce0 : i1, out b_we0 : i1, out b_address0 : i10, out b_dout0 : i32, out b_ce1 : i1, out b_we1 : i1, out b_address1 : i10, out b_dout1 : i32) {
    %mem_to_bram_converter_a.ce0, %mem_to_bram_converter_a.we0, %mem_to_bram_converter_a.address0, %mem_to_bram_converter_a.dout0, %mem_to_bram_converter_a.ce1, %mem_to_bram_converter_a.we1, %mem_to_bram_converter_a.address1, %mem_to_bram_converter_a.dout1, %mem_to_bram_converter_a.loadData = hw.instance "mem_to_bram_converter_a" @mem_to_bram_32_10(loadEn: %example1_wrapped.a_loadEn: i1, loadAddr: %example1_wrapped.a_loadAddr: i10, storeEn: %example1_wrapped.a_storeEn: i1, storeAddr: %example1_wrapped.a_storeAddr: i10, storeData: %example1_wrapped.a_storeData: i32, din0: %a_din0: i32, din1: %a_din1: i32) -> (ce0: i1, we0: i1, address0: i10, dout0: i32, ce1: i1, we1: i1, address1: i10, dout1: i32, loadData: i32)
    %mem_to_bram_converter_b.ce0, %mem_to_bram_converter_b.we0, %mem_to_bram_converter_b.address0, %mem_to_bram_converter_b.dout0, %mem_to_bram_converter_b.ce1, %mem_to_bram_converter_b.we1, %mem_to_bram_converter_b.address1, %mem_to_bram_converter_b.dout1, %mem_to_bram_converter_b.loadData = hw.instance "mem_to_bram_converter_b" @mem_to_bram_32_10(loadEn: %example1_wrapped.b_loadEn: i1, loadAddr: %example1_wrapped.b_loadAddr: i10, storeEn: %example1_wrapped.b_storeEn: i1, storeAddr: %example1_wrapped.b_storeAddr: i10, storeData: %example1_wrapped.b_storeData: i32, din0: %b_din0: i32, din1: %b_din1: i32) -> (ce0: i1, we0: i1, address0: i10, dout0: i32, ce1: i1, we1: i1, address1: i10, dout1: i32, loadData: i32)
    %example1_wrapped.a_end, %example1_wrapped.b_end, %example1_wrapped.end, %example1_wrapped.a_loadEn, %example1_wrapped.a_loadAddr, %example1_wrapped.a_storeEn, %example1_wrapped.a_storeAddr, %example1_wrapped.a_storeData, %example1_wrapped.b_loadEn, %example1_wrapped.b_loadAddr, %example1_wrapped.b_storeEn, %example1_wrapped.b_storeAddr, %example1_wrapped.b_storeData = hw.instance "example1_wrapped" @example1(a_loadData: %mem_to_bram_converter_a.loadData: i32, b_loadData: %mem_to_bram_converter_b.loadData: i32, a_start: %a_start: !handshake.control<>, b_start: %b_start: !handshake.control<>, start: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (a_end: !handshake.control<>, b_end: !handshake.control<>, end: !handshake.control<>, a_loadEn: i1, a_loadAddr: i10, a_storeEn: i1, a_storeAddr: i10, a_storeData: i32, b_loadEn: i1, b_loadAddr: i10, b_storeEn: i1, b_storeAddr: i10, b_storeData: i32)
    hw.output %example1_wrapped.a_end, %example1_wrapped.b_end, %example1_wrapped.end, %mem_to_bram_converter_a.ce0, %mem_to_bram_converter_a.we0, %mem_to_bram_converter_a.address0, %mem_to_bram_converter_a.dout0, %mem_to_bram_converter_a.ce1, %mem_to_bram_converter_a.we1, %mem_to_bram_converter_a.address1, %mem_to_bram_converter_a.dout1, %mem_to_bram_converter_b.ce0, %mem_to_bram_converter_b.we0, %mem_to_bram_converter_b.address0, %mem_to_bram_converter_b.dout0, %mem_to_bram_converter_b.ce1, %mem_to_bram_converter_b.we1, %mem_to_bram_converter_b.address1, %mem_to_bram_converter_b.dout1 : !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i1, i10, i32, i1, i1, i10, i32, i1, i1, i10, i32, i1, i1, i10, i32
  }
}

